require 'sqlite3'
require 'json'

ip_address = ENV['TARGET_IP']
domain_name = ENV['DOMAIN_NAME']
dnsmasq_path = ENV['DNSMASQ_PATH']
avahi_path = ENV['AVAHI_PATH']
db_path = ENV['DB_PATH']

if ip_address.nil? || ip_address.empty?
  puts "Please set the TARGET_IP environment variable."
  exit 1
end

if domain_name.nil? || domain_name.empty?
  puts "Please set the DOMAIN_NAME environment variable."
  exit 1
end

if dnsmasq_path.nil? || dnsmasq_path.empty?
  puts "Please set the DNSMASQ_PATH environment variable."
  exit 1
end

if db_path.nil? || db_path.empty?
  puts "Please set the DB_PATH environment variable."
  exit 1
end

begin
  db = SQLite3::Database.open(db_path)
  rows = db.execute("SELECT domain_names FROM proxy_host")
  hostnames = rows.flatten.map { |domains| JSON.parse(domains) }.flatten.uniq.reject { |hostname| hostname.include?('.') }

  hostnames.sort!

  dnsmasq_hosts = <<END_OF_WARNING
# DO NOT EDIT THIS FILE
# This file is automatically generated from nginx-reverse-proxy
# Any changes will be lost
# generated by https://github.com/pdxhackerspace-hackstack-autogenerate-hosts
END_OF_WARNING

  hostnames.map do |hostname|
    dnsmasq_hosts += "#{ip_address} #{hostname} #{hostname}.#{domain_name} #{hostname}.local\n"
  end

  File.open(dnsmasq_path, 'w') do |file|
    file.write(dnsmasq_hosts)
  end

  puts "dnsmasq configuration file generated successfully at #{dnsmasq_path}"

rescue SQLite3::Exception => e
  puts "An error occurred while accessing the database: #{e.message}"
ensure
  db.close if db
end
